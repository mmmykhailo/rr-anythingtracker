name: Deploy to GitHub Pages

on:
  push:
    branches: [master]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      version: ${{ steps.package_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Extract package.json version
        id: package_version
        run: echo "version=$(bun -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Get latest git tag
        id: latest_tag
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=${TAG#v}" >> $GITHUB_OUTPUT

      - name: Check version updated
        id: check
        run: |
          PACKAGE_VERSION="${{ steps.package_version.outputs.version }}"
          LATEST_TAG="${{ steps.latest_tag.outputs.tag }}"
          echo "Package version: $PACKAGE_VERSION"
          echo "Latest tag: $LATEST_TAG"

          if [ "$PACKAGE_VERSION" = "$LATEST_TAG" ]; then
            echo "⏭️  Version not updated - skipping deployment"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Version updated: $LATEST_TAG → $PACKAGE_VERSION"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.should_deploy == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build
        run: bun run build
        env:
          # Set the base path for GitHub Pages
          PUBLIC_URL: /${{ github.event.repository.name }}

      - name: Handle SPA routing for GitHub Pages
        run: cp build/index.html build/404.html

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./build"

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [check-version, build]
    if: needs.check-version.outputs.should_deploy == 'true'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  tag:
    runs-on: ubuntu-latest
    needs: [check-version, deploy]
    if: needs.check-version.outputs.should_deploy == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ needs.check-version.outputs.version }}" -m "Release v${{ needs.check-version.outputs.version }}"
          git push origin "v${{ needs.check-version.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
